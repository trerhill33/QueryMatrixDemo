@using System.Reflection
@using QueryMatrixDemo.Core.Models
@using QueryMatrixDemo.Core.Operators
@using QueryMatrixDemo.Core.Interfaces
@inject IQueryMatrixService QueryMatrixService

<div class="condition-editor border p-3 mb-2">
    <div class="row g-2">
        <!-- Field Selection -->
        <div class="col-md-3">
            <label class="form-label">Field</label>
            <select class="form-select" value="@Condition.Field" @onchange="OnFieldChanged">
                <option value="">Select field...</option>
                @foreach (var prop in AvailableProperties)
                {
                    <option value="@prop.Name">@GetDisplayName(prop)</option>
                }
            </select>
        </div>

        <!-- Operator Selection -->
        <div class="col-md-3">
            <label class="form-label">Operator</label>
            <select class="form-select" value="@Condition.Operator?.Value" @onchange="OnOperatorChanged" 
                    disabled="@string.IsNullOrEmpty(Condition.Field)">
                <option value="">Select operator...</option>
                @if (!string.IsNullOrEmpty(Condition.Field))
                {
                    @foreach (var op in GetValidOperators())
                    {
                        <option value="@op.Value">@op.Description</option>
                    }
                }
            </select>
        </div>

        <!-- Value Input -->
        <div class="col-md-5">
            <label class="form-label">Value</label>
            @if (Condition.Operator?.IsColumnOperation == true)
            {
                <select class="form-select" value="@Condition.CompareToColumn" @onchange="OnCompareToColumnChanged">
                    <option value="">Select comparison field...</option>
                    @foreach (var prop in GetCompatibleProperties())
                    {
                        <option value="@prop.Name">@GetDisplayName(prop)</option>
                    }
                </select>
            }
            else if (Condition.Operator?.IsNullOperation == true)
            {
                <select class="form-select" @onchange="OnNullValueChanged">
                    <option value="true">Is Null</option>
                    <option value="false">Is Not Null</option>
                </select>
            }
            else
            {
                @switch (GetSelectedPropertyType())
                {
                    case "System.String":
                        <input type="text" class="form-control" value="@GetStringValue()" 
                               @onchange="OnValueChanged" />
                        break;
                    case "System.Int32":
                        <input type="number" class="form-control" value="@GetIntValue()" 
                               @onchange="OnValueChanged" />
                        break;
                    case "System.Decimal":
                        <input type="number" class="form-control" step="0.01" value="@GetDecimalValue()" 
                               @onchange="OnValueChanged" />
                        break;
                    case "System.DateTime":
                        <input type="datetime-local" class="form-control" value="@GetDateTimeValue()" 
                               @onchange="OnValueChanged" />
                        break;
                    case "System.Boolean":
                        <select class="form-select" value="@GetBoolValue()" @onchange="OnValueChanged">
                            <option value="true">True</option>
                            <option value="false">False</option>
                        </select>
                        break;
                    default:
                        <input type="text" class="form-control" value="@GetStringValue()" 
                               @onchange="OnValueChanged" />
                        break;
                }
            }
        </div>

        <!-- Remove Button -->
        <div class="col-md-1 d-flex align-items-end">
            <button class="btn btn-danger" @onclick="RemoveCondition">
                <span class="oi oi-x"></span>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public QueryCondition Condition { get; set; } = default!;
    [Parameter] public IEnumerable<PropertyInfo> AvailableProperties { get; set; } = default!;
    [Parameter] public EventCallback<QueryCondition> OnConditionChanged { get; set; }
    [Parameter] public EventCallback OnRemoveCondition { get; set; }

    private string GetDisplayName(PropertyInfo prop)
    {
        return string.Join(" ", System.Text.RegularExpressions.Regex.Split(prop.Name, @"(?<!^)(?=[A-Z])"));
    }

    private IEnumerable<QueryOperator> GetValidOperators()
    {
        if (string.IsNullOrEmpty(Condition.Field))
            return Array.Empty<QueryOperator>();

        var property = AvailableProperties.FirstOrDefault(p => p.Name == Condition.Field);
        return property != null ? QueryMatrixService.GetValidOperatorsForProperty(property) : Array.Empty<QueryOperator>();
    }

    private IEnumerable<PropertyInfo> GetCompatibleProperties()
    {
        if (string.IsNullOrEmpty(Condition.Field))
            return Array.Empty<PropertyInfo>();

        var currentProperty = AvailableProperties.FirstOrDefault(p => p.Name == Condition.Field);
        if (currentProperty == null)
            return Array.Empty<PropertyInfo>();

        return AvailableProperties.Where(p => p.PropertyType == currentProperty.PropertyType);
    }

    private string GetSelectedPropertyType()
    {
        var property = AvailableProperties.FirstOrDefault(p => p.Name == Condition.Field);
        return property?.PropertyType.FullName ?? "System.String";
    }

    private async Task OnFieldChanged(ChangeEventArgs e)
    {
        var newField = e.Value?.ToString() ?? string.Empty;
        var property = AvailableProperties.FirstOrDefault(p => p.Name == newField);
        
        if (property != null)
        {
            var validOperators = QueryMatrixService.GetValidOperatorsForProperty(property);
            var defaultOperator = validOperators.FirstOrDefault();

            Condition = Condition with 
            { 
                Field = newField,
                Operator = defaultOperator,
                Value = GetDefaultValue(property.PropertyType)
            };

            await OnConditionChanged.InvokeAsync(Condition);
        }
    }

    private async Task OnOperatorChanged(ChangeEventArgs e)
    {
        var operatorValue = e.Value?.ToString() ?? string.Empty;
        var newOperator = QueryOperator.FromString(operatorValue);
        
        if (newOperator != null)
        {
            Condition = Condition with { Operator = newOperator };
            await OnConditionChanged.InvokeAsync(Condition);
        }
    }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        var newValue = ConvertValue(e.Value?.ToString(), GetSelectedPropertyType());
        Condition = Condition with { Value = ConditionValue.Single(newValue) };
        await OnConditionChanged.InvokeAsync(Condition);
    }

    private async Task OnCompareToColumnChanged(ChangeEventArgs e)
    {
        var columnName = e.Value?.ToString() ?? string.Empty;
        Condition = Condition with 
        { 
            Value = ConditionValue.Column(columnName),
            CompareToColumn = columnName
        };
        await OnConditionChanged.InvokeAsync(Condition);
    }

    private async Task OnNullValueChanged(ChangeEventArgs e)
    {
        var isNull = bool.Parse(e.Value?.ToString() ?? "true");
        Condition = Condition with { Value = ConditionValue.Null() };
        await OnConditionChanged.InvokeAsync(Condition);
    }

    private async Task RemoveCondition()
    {
        await OnRemoveCondition.InvokeAsync();
    }

    private ConditionValue GetDefaultValue(Type propertyType)
    {
        if (propertyType == typeof(string))
            return ConditionValue.Single(string.Empty);
        if (propertyType == typeof(int))
            return ConditionValue.Single(0);
        if (propertyType == typeof(decimal))
            return ConditionValue.Single(0m);
        if (propertyType == typeof(DateTime))
            return ConditionValue.Single(DateTime.Now);
        if (propertyType == typeof(bool))
            return ConditionValue.Single(false);
        
        return ConditionValue.Single(string.Empty);
    }

    private string GetStringValue() => Condition.Value.Value?.ToString() ?? string.Empty;
    private string GetIntValue() => Condition.Value.Value?.ToString() ?? "0";
    private string GetDecimalValue() => Condition.Value.Value?.ToString() ?? "0.00";
    private string GetDateTimeValue() => 
        (Condition.Value.Value as DateTime?)?.ToString("yyyy-MM-ddTHH:mm") ?? 
        DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
    private string GetBoolValue() => Condition.Value.Value?.ToString()?.ToLower() ?? "false";

    private object ConvertValue(string? value, string propertyType)
    {
        if (string.IsNullOrEmpty(value))
            return GetDefaultValue(Type.GetType(propertyType) ?? typeof(string)).Value!;

        return propertyType switch
        {
            "System.String" => value,
            "System.Int32" => int.Parse(value),
            "System.Decimal" => decimal.Parse(value),
            "System.DateTime" => DateTime.Parse(value),
            "System.Boolean" => bool.Parse(value),
            _ => value
        };
    }
}