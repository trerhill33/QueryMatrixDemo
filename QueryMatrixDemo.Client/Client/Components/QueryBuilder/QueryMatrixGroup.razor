@using System.Reflection
@using QueryMatrixDemo.Core.Models
@using QueryMatrixDemo.Core.Operators
@using QueryMatrixDemo.Core.Interfaces
@inject IQueryMatrixService QueryMatrixService

<div class="query-matrix-group @(Level > 0 ? "nested-group" : "root-group")">
    <div class="group-header mb-3">
        @if (Level > 0)
        {
            <div class="group-header mb-3 d-flex justify-content-between align-items-center">
                <div class="operator-select">
                    <select class="form-select form-select-sm" value="@Matrix.LogicalOperator" @onchange="OnLogicalOperatorChanged">
                        <option value="@QueryOperator.And">AND</option>
                        <option value="@QueryOperator.Or">OR</option>
                    </select>
                </div>
                <button class="btn btn-outline-danger btn-sm ms-2" @onclick="RequestRemove">
                    <span class="oi oi-trash"></span> Remove Group
                </button>
            </div>
        }
        else
        {
            <div class="operator-select" style="width: 200px;">
                <select class="form-select form-select-sm" value="@Matrix.LogicalOperator" @onchange="OnLogicalOperatorChanged">
                    <option value="@QueryOperator.And">AND</option>
                    <option value="@QueryOperator.Or">OR</option>
                </select>
            </div>
        }
    </div>

    <div class="conditions-container mb-3">
        @foreach (var condition in Matrix.Conditions)
        {
            <div class="condition-item">
                <QueryConditionEditor Condition="@condition"
                                      AvailableProperties="@AvailableProperties"
                                      OnConditionChanged="@(async (QueryCondition newCondition) => await HandleConditionChanged(condition, newCondition))"
                                      OnRemoveCondition="@(() => RemoveCondition(condition))" />
            </div>
        }
    </div>

    @if (Matrix.NestedMatrices.Any())
    {
        <div class="nested-matrices-container mb-3">
            @foreach (var nestedMatrix in Matrix.NestedMatrices)
            {
                <div class="nested-group-container">
                    <QueryMatrixGroup Matrix="@nestedMatrix"
                                      AvailableProperties="@AvailableProperties"
                                      OnMatrixChanged="@(async (QueryMatrix newMatrix) => await HandleNestedMatrixChanged(nestedMatrix, newMatrix))"
                                      OnRequestRemove="@(() => RemoveNestedMatrix(nestedMatrix))"
                                      Level="@(Level + 1)" />
                </div>
            }
        </div>
    }

    <div class="group-actions mb-3 d-flex justify-content-start">
        <button class="btn btn-outline-primary btn-sm me-2" @onclick="AddCondition">
            <span class="oi oi-plus"></span> Add Condition
        </button>
        <button class="btn btn-outline-secondary btn-sm" @onclick="AddNestedGroup">
            <span class="oi oi-layers"></span> Add Group
        </button>
    </div>
</div>

@code {
    [Parameter] public QueryMatrix Matrix { get; set; } = default!;
    [Parameter] public IEnumerable<PropertyInfo> AvailableProperties { get; set; } = default!;
    [Parameter] public EventCallback<QueryMatrix> OnMatrixChanged { get; set; }
    [Parameter] public EventCallback OnRequestRemove { get; set; }
    [Parameter] public int Level { get; set; } = 0;

    private async Task OnLogicalOperatorChanged(ChangeEventArgs e)
    {
        var operatorValue = e.Value?.ToString() ?? QueryOperator.And.ToString();
        if (Enum.TryParse<QueryOperator>(operatorValue, true, out var newOperator))
        {
            Matrix.LogicalOperator = newOperator;
            await OnMatrixChanged.InvokeAsync(Matrix);
        }
    }

    private async Task AddCondition()
    {
        var firstProperty = AvailableProperties.FirstOrDefault();
        var defaultOperator = firstProperty != null 
            ? QueryMatrixService.GetValidOperatorsForProperty(firstProperty).First()
            : QueryOperator.Equals;

        var newCondition = new QueryCondition
        {
            Field = firstProperty?.Name ?? string.Empty,
            Operator = defaultOperator,
            Value = GetDefaultValue(firstProperty?.PropertyType.FullName ?? "System.String")
        };

        Matrix.Conditions.Add(newCondition);
        await OnMatrixChanged.InvokeAsync(Matrix);
    }

    private async Task AddNestedGroup()
    {
        var nestedMatrix = new QueryMatrix
        {
            LogicalOperator = QueryOperator.And,
            Conditions = new List<QueryCondition>(),
            NestedMatrices = new List<QueryMatrix>()
        };

        Matrix.NestedMatrices.Add(nestedMatrix);
        await OnMatrixChanged.InvokeAsync(Matrix);
    }

    private async Task HandleConditionChanged(QueryCondition oldCondition, QueryCondition newCondition)
    {
        var index = Matrix.Conditions.IndexOf(oldCondition);
        if (index >= 0)
        {
            Matrix.Conditions[index] = newCondition;
            await OnMatrixChanged.InvokeAsync(Matrix);
        }
    }

    private async Task HandleNestedMatrixChanged(QueryMatrix oldMatrix, QueryMatrix newMatrix)
    {
        var index = Matrix.NestedMatrices.IndexOf(oldMatrix);
        if (index >= 0)
        {
            Matrix.NestedMatrices[index] = newMatrix;
            await OnMatrixChanged.InvokeAsync(Matrix);
        }
    }

    private async Task RemoveCondition(QueryCondition condition)
    {
        Matrix.Conditions.Remove(condition);
        await OnMatrixChanged.InvokeAsync(Matrix);
    }

    private async Task RemoveNestedMatrix(QueryMatrix nestedMatrix)
    {
        Matrix.NestedMatrices.Remove(nestedMatrix);
        await OnMatrixChanged.InvokeAsync(Matrix);
    }

    private async Task RequestRemove()
    {
        await OnRequestRemove.InvokeAsync();
    }

    private ConditionValue GetDefaultValue(string propertyType)
    {
        Type type = Type.GetType(propertyType) ?? typeof(string);

        if (type == typeof(string))
            return new ConditionValue(string.Empty, ConditionValueType.Single);
        if (type == typeof(int))
            return new ConditionValue(0, ConditionValueType.Single);
        if (type == typeof(decimal))
            return new ConditionValue(0m, ConditionValueType.Single);
        if (type == typeof(DateTime))
            return new ConditionValue(DateTime.Now, ConditionValueType.Single);
        if (type == typeof(bool))
            return new ConditionValue(false, ConditionValueType.Single);

        return new ConditionValue(string.Empty, ConditionValueType.Single);
    }
}
