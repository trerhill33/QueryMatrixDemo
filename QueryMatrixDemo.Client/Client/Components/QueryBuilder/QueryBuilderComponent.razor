@using System.Reflection
@using System.Text.Json
@using QueryMatrixDemo.Core.Models
@using QueryMatrixDemo.Core.Operators
@using QueryMatrixDemo.Core.Interfaces
@using QueryMatrixDemo.Core.Serialization
@using QueryMatrixDemo.Shared.Entities
@inject IQueryMatrixService QueryMatrixService
@inject HttpClient Http
@inject IJSRuntime JS

<div class="query-builder">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">@Title</h3>
            @if (IsLoading)
            {
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label">Select Entity Type:</label>
                <select class="form-select" @onchange="OnEntityTypeChanged">
                    <option value="">Select an entity...</option>
                    @foreach (var entity in AvailableEntities)
                    {
                        <option value="@entity">@FormatEntityName(entity)</option>
                    }
                </select>
            </div>

            @if (!string.IsNullOrEmpty(SelectedEntityType))
            {
                <QueryMatrixGroup Matrix="@RootMatrix" 
                                 AvailableProperties="@FilterableProperties"
                                 OnMatrixChanged="@OnMatrixChanged" />
            }
        </div>
        <div class="card-footer d-flex justify-content-between">
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="ExecuteQuery" disabled="@(!CanExecuteQuery || IsLoading)">
                    <span class="oi oi-magnifying-glass me-1"></span> Execute Query
                </button>
                <button class="btn btn-outline-secondary" @onclick="ResetQuery" disabled="@(!CanReset || IsLoading)">
                    <span class="oi oi-reload me-1"></span> Reset
                </button>
            </div>
            @if (ShowQueryPreview)
            {
                <button class="btn btn-link" @onclick="ToggleQueryPreview">
                    @(IsPreviewVisible ? "Hide Query" : "Show Query")
                </button>
            }
        </div>
    </div>

    @if (IsPreviewVisible && RootMatrix != null)
    {
        <div class="card mt-3">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span>Query Preview</span>
                <button class="btn btn-sm btn-outline-primary" @onclick="@(() => CopyToClipboard(QueryMatrixSerializer.ToJson(RootMatrix)))">
                    <span class="oi oi-clipboard me-1"></span> Copy
                </button>
            </div>
            <div class="card-body">
                <pre class="query-preview">@QueryMatrixSerializer.ToJson(RootMatrix)</pre>
            </div>
        </div>
    }

    @if (QueryError != null)
    {
        <div class="alert alert-danger mt-3">
            <h5 class="alert-heading">Error</h5>
            <p class="mb-0">@QueryError</p>
        </div>
    }

    @if (QueryResults != null)
    {
        <div class="mt-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Results</h4>
                    <div class="d-flex align-items-center gap-3">
                        <span class="badge bg-primary">@(GetResultCount()) results</span>
                        <button class="btn btn-sm btn-outline-primary" @onclick="ExportResults">
                            <span class="oi oi-data-transfer-download me-1"></span> Export
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <QueryResultsGrid Data="@QueryResults" />
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "Query Builder";
    [Parameter] public bool ShowQueryPreview { get; set; } = true;
    [Parameter] public EventCallback<object> OnQueryExecuted { get; set; }

    private string SelectedEntityType { get; set; } = string.Empty;
    private QueryMatrix RootMatrix { get; set; } = new()
    {
        LogicalOperator = QueryOperator.And,
        Conditions = new List<QueryCondition>(),
        NestedMatrices = new List<QueryMatrix>()
    };
    private IEnumerable<PropertyInfo> FilterableProperties { get; set; } = Array.Empty<PropertyInfo>();
    private object? QueryResults { get; set; }
    private string? QueryError { get; set; }
    private bool IsPreviewVisible { get; set; }
    private bool IsLoading { get; set; }

    private bool CanExecuteQuery => !string.IsNullOrEmpty(SelectedEntityType) &&
        (RootMatrix.Conditions.Any() || RootMatrix.NestedMatrices.Any());
    private bool CanReset => !string.IsNullOrEmpty(SelectedEntityType);

    private readonly string[] AvailableEntities = new[]
    {
        "Product",
        "Category",
        "Order",
        "Customer",
        "Warehouse",
        "InventoryItem"
    };

    private string FormatEntityName(string entityName)
    {
        return string.Join(" ", System.Text.RegularExpressions.Regex.Split(entityName, @"(?<!^)(?=[A-Z])"));
    }

    private async Task OnEntityTypeChanged(ChangeEventArgs e)
    {
        QueryResults = null;
        QueryError = null;
        SelectedEntityType = e.Value?.ToString() ?? string.Empty;

        if (!string.IsNullOrEmpty(SelectedEntityType))
        {
            try
            {
                FilterableProperties = SelectedEntityType switch
                {
                    "Product" => QueryMatrixService.GetFilterableProperties<Product>(),
                    "Category" => QueryMatrixService.GetFilterableProperties<Category>(),
                    "Order" => QueryMatrixService.GetFilterableProperties<Order>(),
                    "Customer" => QueryMatrixService.GetFilterableProperties<Customer>(),
                    "Warehouse" => QueryMatrixService.GetFilterableProperties<Warehouse>(),
                    "InventoryItem" => QueryMatrixService.GetFilterableProperties<InventoryItem>(),
                    _ => throw new InvalidOperationException($"Entity type {SelectedEntityType} not supported")
                };

                ResetMatrix();
            }
            catch (Exception ex)
            {
                QueryError = $"Error loading entity type: {ex.Message}";
            }
        }
    }

    private void ResetMatrix()
    {
        RootMatrix = new()
        {
            LogicalOperator = QueryOperator.And,
            Conditions = new List<QueryCondition>(),
            NestedMatrices = new List<QueryMatrix>()
        };
    }

    private async Task OnMatrixChanged(QueryMatrix newMatrix)
    {
        RootMatrix = newMatrix;
        StateHasChanged();
    }

    private async Task ExecuteQuery()
    {
        if (string.IsNullOrEmpty(SelectedEntityType))
            return;

        IsLoading = true;
        QueryError = null;
        QueryResults = null;

        try
        {
            var response = await Http.PostAsJsonAsync(
                $"api/query/{SelectedEntityType}",
                RootMatrix
            );

            if (response.IsSuccessStatusCode)
            {
                QueryResults = await response.Content.ReadFromJsonAsync<IEnumerable<object>>();
                await OnQueryExecuted.InvokeAsync(QueryResults);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                QueryError = $"Query failed: {error}";
            }
        }
        catch (Exception ex)
        {
            QueryError = $"Error executing query: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ResetQuery()
    {
        QueryResults = null;
        QueryError = null;
        ResetMatrix();
    }

    private void ToggleQueryPreview()
    {
        IsPreviewVisible = !IsPreviewVisible;
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
            await JS.InvokeVoidAsync("alert", "Query copied to clipboard!");
        }
        catch (Exception ex)
        {
            QueryError = $"Error copying to clipboard: {ex.Message}";
        }
    }

    private async Task ExportResults()
    {
        if (QueryResults == null)
            return;

        try
        {
            var json = JsonSerializer.Serialize(
                QueryResults,
                new JsonSerializerOptions 
                { 
                    WriteIndented = true,
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                }
            );

            var fileName = $"{SelectedEntityType}_Query_Results_{DateTime.Now:yyyyMMddHHmmss}.json";
            var bytes = System.Text.Encoding.UTF8.GetBytes(json);
            var base64 = Convert.ToBase64String(bytes);

            await JS.InvokeVoidAsync("downloadFileFromBase64", fileName, base64, "application/json");
        }
        catch (Exception ex)
        {
            QueryError = $"Error exporting results: {ex.Message}";
        }
    }

    private int GetResultCount()
    {
        return (QueryResults as IEnumerable<object>)?.Count() ?? 0;
    }
}